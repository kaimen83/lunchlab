# Task ID: 1
# Title: Create Database Schema for Multi-location Support
# Status: pending
# Dependencies: None
# Priority: high
# Description: Implement the new database tables and modify existing tables to support multi-location inventory management
# Details:
Create the storage_locations table with fields for id, company_id, name, description, location_type, is_active, created_at, and updated_at. Add location_id column to the stock_items table with a foreign key reference to storage_locations. Create the stock_transfers table with all required fields for tracking inventory movements between locations. Implement database constraints and indexes for performance optimization.

# Test Strategy:
Verify table creation with Supabase console. Test foreign key constraints by attempting invalid operations. Validate unique constraints on company_id and name in storage_locations table.

# Subtasks:
## 1. Design and Document Database Schema Architecture [pending]
### Dependencies: None
### Description: Create comprehensive schema design documentation including ER diagrams, data dictionary, and location hierarchy modeling. Define the core entities (locations, products, inventory, stock_transfers) and their relationships following normalization best practices.
### Details:
Create ER diagrams showing relationships between storage_locations, stock_items, and stock_transfers tables. Document location hierarchy structure (company â†’ location) and define data dictionary with field definitions, constraints, and business rules. Plan geo-partitioning strategy if using distributed databases. Include address component normalization (separate fields for city, state, country) and define location_type enumeration values. Document foreign key relationships and cascade behaviors. Use tools like draw.io or Lucidchart for ER diagrams and maintain documentation in version control.

## 2. Create Core Storage Locations Table with Constraints [pending]
### Dependencies: 1.1
### Description: Implement the storage_locations table with proper data types, constraints, and validation rules. Include support for location hierarchies and geographic data following normalized address storage patterns.
### Details:
Create storage_locations table with fields: id (SERIAL PRIMARY KEY), company_id (INT with FK constraint), name (VARCHAR(255) NOT NULL), description (TEXT), location_type (ENUM/VARCHAR with CHECK constraint), address components (street, city, state, country as separate fields), is_active (BOOLEAN DEFAULT true), created_at/updated_at (TIMESTAMP with DEFAULT). Add CHECK constraints for location_type validation, NOT NULL constraints for required fields, and UNIQUE constraint on (company_id, name) to prevent duplicate location names per company. Include proper indexing on company_id and location_type for query performance.

## 3. Modify Stock Items Table for Multi-Location Support [pending]
### Dependencies: 1.2
### Description: Add location_id foreign key column to existing stock_items table and implement proper constraints to ensure referential integrity. Handle data migration for existing inventory records.
### Details:
Add location_id column to stock_items table as INT with FOREIGN KEY constraint referencing storage_locations(id). Implement ON DELETE RESTRICT to prevent location deletion with existing inventory. Create composite UNIQUE constraint on (product_id, location_id) to prevent duplicate inventory records per product per location. Add NOT NULL constraint after data migration. Create migration script to assign existing stock_items to a default location. Update existing indexes to include location_id for optimal query performance. Test constraint violations and cascade behaviors thoroughly.

## 4. Create Stock Transfers Table for Inventory Movement Tracking [pending]
### Dependencies: 1.2, 1.3
### Description: Implement stock_transfers table to track inventory movements between locations with proper audit trail and transaction integrity features.
### Details:
Create stock_transfers table with fields: id (SERIAL PRIMARY KEY), transfer_number (VARCHAR UNIQUE for business reference), from_location_id (INT FK to storage_locations), to_location_id (INT FK to storage_locations), product_id (INT FK to products), quantity (INT NOT NULL CHECK quantity > 0), transfer_status (ENUM: pending, in_transit, completed, cancelled), initiated_by (user reference), completed_by (user reference), initiated_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP), completed_at (TIMESTAMP), notes (TEXT). Add CHECK constraint to ensure from_location_id != to_location_id. Create indexes on location IDs, product_id, transfer_status, and date fields for reporting queries.

## 5. Implement Performance Optimization Indexes and Constraints [pending]
### Dependencies: 1.2, 1.3, 1.4
### Description: Create comprehensive indexing strategy and additional database constraints to ensure optimal query performance and data integrity across all multi-location tables.
### Details:
Create composite indexes: (company_id, location_type) on storage_locations, (location_id, product_id) on stock_items, (from_location_id, transfer_status) and (to_location_id, transfer_status) on stock_transfers. Add partial indexes for active locations: CREATE INDEX idx_active_locations ON storage_locations(company_id) WHERE is_active = true. Implement database-level constraints for business rules: CHECK constraints for quantity validations, foreign key constraints with appropriate CASCADE/RESTRICT behaviors. Create database triggers for audit trails (updated_at timestamps). Analyze query patterns and add covering indexes for frequent multi-table joins. Test index effectiveness with EXPLAIN ANALYZE on common queries.

## 6. Validate Schema Implementation and Create Migration Scripts [pending]
### Dependencies: 1.1, 1.2, 1.3, 1.4, 1.5
### Description: Perform comprehensive testing of the schema implementation, create production-ready migration scripts, and validate data integrity across all multi-location functionality.
### Details:
Create database migration scripts using tools like Flyway or Alembic with proper rollback procedures. Test all foreign key constraints, check constraints, and unique constraints with edge cases. Validate location hierarchy queries and inventory aggregation across locations. Create sample data for testing multi-location scenarios including stock transfers. Perform load testing on indexed queries to ensure performance meets requirements. Document migration procedures, rollback plans, and post-migration validation steps. Create database seeding scripts for development environments. Test constraint violations, cascade behaviors, and transaction integrity. Validate that all business rules are enforced at the database level.

