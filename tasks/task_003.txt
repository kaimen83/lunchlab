# Task ID: 3
# Title: Develop Storage Location Management API
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create API endpoints for CRUD operations on storage locations
# Details:
Implement GET, POST, PUT, and DELETE endpoints for /api/companies/[id]/storage-locations as specified in the PRD. Include validation for required fields and constraints. Implement proper error handling and response formatting. Ensure authentication and authorization checks are in place. Add pagination support for listing locations.

# Test Strategy:
Test each endpoint with valid and invalid data. Verify proper error responses. Test authorization by attempting operations with different user roles.

# Subtasks:
## 1. Set up Storage Location Data Model and Repository Layer [pending]
### Dependencies: None
### Description: Create the database model for storage locations with proper validation constraints and implement the repository pattern for data access abstraction. This includes defining the schema, relationships, and data access methods following best practices.
### Details:
1. Define StorageLocation model with fields: id (primary key), name (required, string), address (required, string), capacity (required, integer >= 0), companyId (foreign key), createdAt, updatedAt. 2. Implement validation constraints at the database level (NOT NULL, CHECK constraints). 3. Create StorageLocationRepository class implementing repository pattern with methods: create(), findById(), findByCompanyId(), update(), delete(), findAllPaginated(). 4. Add proper indexing on companyId and name fields for query performance. 5. Set up database migrations for schema creation. 6. Write unit tests for repository methods using in-memory database or mocking. 7. Implement error handling for database connection issues and constraint violations.

## 2. Implement Authentication and Authorization Middleware [pending]
### Dependencies: 3.1
### Description: Create middleware components for JWT-based authentication and role-based authorization to secure the storage location endpoints. This ensures only authenticated users with proper permissions can access company-specific storage locations.
### Details:
1. Implement JWT authentication middleware that validates bearer tokens and extracts user information. 2. Create authorization middleware that checks if user has access to the specified company (company ownership or admin role). 3. Implement rate limiting middleware to prevent API abuse (e.g., 100 requests per minute per user). 4. Add request logging middleware that captures user ID, company ID, endpoint, and timestamp for audit trails. 5. Create error handling for expired tokens, invalid tokens, and insufficient permissions. 6. Set up middleware chain order: rate limiting → authentication → authorization → logging. 7. Write integration tests for authentication flows including valid tokens, expired tokens, and unauthorized access attempts.

## 3. Create Input Validation and DTO Layer [pending]
### Dependencies: 3.1
### Description: Implement comprehensive input validation using validation libraries and create Data Transfer Objects (DTOs) for request/response schemas. This ensures data integrity and provides clear API contracts.
### Details:
1. Create DTOs: CreateStorageLocationDTO, UpdateStorageLocationDTO, StorageLocationResponseDTO with proper type definitions. 2. Implement validation schemas using Joi or similar library: name (required, string, 1-100 chars), address (required, string, 1-255 chars), capacity (required, integer, min: 0, max: 1000000). 3. Create validation middleware that runs before controller methods and returns standardized error responses. 4. Implement sanitization for string inputs to prevent XSS attacks. 5. Add custom validation rules for business logic (e.g., unique name per company). 6. Create validation error formatter that returns consistent error structure with field-specific messages. 7. Write unit tests for all validation scenarios including edge cases, invalid data types, and boundary values.

## 4. Develop CRUD API Endpoints with Error Handling [pending]
### Dependencies: 3.1, 3.2, 3.3
### Description: Implement the five RESTful endpoints (GET list, GET by ID, POST create, PUT update, DELETE) with proper HTTP status codes, error handling, and response formatting following REST conventions.
### Details:
1. Implement GET /api/companies/:companyId/storage-locations with pagination (page, limit parameters), sorting, and filtering capabilities. 2. Create GET /api/companies/:companyId/storage-locations/:id endpoint with proper 404 handling. 3. Implement POST /api/companies/:companyId/storage-locations with 201 status on success and location header. 4. Create PUT /api/companies/:companyId/storage-locations/:id with partial update support and 200/404 responses. 5. Implement DELETE /api/companies/:companyId/storage-locations/:id with 204 on success and 404 for non-existent resources. 6. Add centralized error handling middleware that catches all errors and returns consistent JSON responses without exposing internal details. 7. Implement proper HTTP status codes: 200 (success), 201 (created), 204 (deleted), 400 (validation error), 401 (unauthorized), 403 (forbidden), 404 (not found), 500 (server error). 8. Write integration tests for all endpoints covering success cases, error cases, and edge cases.

## 5. Add Pagination, Filtering, and API Documentation [pending]
### Dependencies: 3.4
### Description: Enhance the list endpoint with robust pagination, filtering, and sorting capabilities, and create comprehensive API documentation using OpenAPI/Swagger specifications for client integration.
### Details:
1. Implement cursor-based pagination for the list endpoint with parameters: page (default: 1), limit (default: 20, max: 100), and return metadata (totalCount, totalPages, currentPage, hasNext, hasPrevious). 2. Add filtering capabilities: filter by name (partial match), capacity range (min/max), and creation date range. 3. Implement sorting options: name (asc/desc), capacity (asc/desc), createdAt (asc/desc) with default sort by createdAt desc. 4. Create OpenAPI 3.0 specification documenting all endpoints, request/response schemas, authentication requirements, and error codes. 5. Add request/response examples for each endpoint including success and error scenarios. 6. Implement API versioning in URL path (/api/v1/companies/:companyId/storage-locations). 7. Set up Swagger UI for interactive API documentation and testing. 8. Add performance monitoring and logging for slow queries and high-volume endpoints. 9. Write comprehensive integration tests covering pagination edge cases, filtering combinations, and sorting options.

