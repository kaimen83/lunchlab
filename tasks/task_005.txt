# Task ID: 5
# Title: Modify Existing Inventory API for Location Support
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Update inventory APIs to support location filtering and aggregation
# Details:
Modify /api/companies/[id]/stock/items endpoint to accept location_id and view_type query parameters. Implement logic to filter items by location when location_id is provided. Add support for 'separated' and 'aggregated' view types. Update response structure to include location information. Ensure backward compatibility for existing clients.

# Test Strategy:
Test API with various combinations of query parameters. Verify filtering works correctly. Compare aggregated results with manual calculations. Check performance with large datasets.

# Subtasks:
## 1. Extend Database Schema and Add Location Indexing [pending]
### Dependencies: None
### Description: Update the database schema to properly support location-based inventory queries by adding necessary indexes and validating existing location relationships. This foundational step ensures efficient filtering and aggregation operations.
### Details:
Add database indexes on location_id fields in inventory tables for optimal query performance. Verify foreign key relationships between inventory items and locations are properly established. Create composite indexes for common query patterns (e.g., company_id + location_id). Run EXPLAIN queries to validate index usage. Add database constraints to ensure data integrity for location references. Test index performance with sample datasets to ensure sub-second response times for location-filtered queries.

## 2. Implement Query Parameter Parsing and Validation [pending]
### Dependencies: 5.1
### Description: Add robust query parameter parsing for location_id and view_type parameters with proper validation and error handling. Support both single and multiple location filtering as recommended by best practices.
### Details:
Extend the existing endpoint to accept 'location_id' (single or comma-separated list), 'location_ids' (array format), and 'view_type' ('separated' or 'aggregated') query parameters. Implement parameter validation middleware to ensure location IDs are valid integers and view_type values are from allowed enum. Add authorization checks to verify users can access specified locations. Create helper functions for parsing comma-separated location lists. Implement proper error responses (400 Bad Request) for invalid parameters with descriptive error messages.

## 3. Develop Location-Based Filtering Logic [pending]
### Dependencies: 5.2
### Description: Implement the core filtering logic to retrieve inventory items based on location parameters while maintaining existing functionality for backward compatibility.
### Details:
Modify the existing query builder to conditionally add location filters when location parameters are provided. Use ORM/query builder methods to filter by location_id IN clause for multiple locations. Implement location-based access control to ensure users only see authorized location data. Maintain the existing query logic when no location parameters are provided for backward compatibility. Add query optimization to use the database indexes created in subtask 1. Create reusable filtering functions that can be applied to different inventory query scenarios.

## 4. Implement View Type Logic for Separated and Aggregated Views [pending]
### Dependencies: 5.3
### Description: Add support for 'separated' and 'aggregated' view types, implementing the aggregation logic that combines inventory data across locations while preserving item-level details for separated views.
### Details:
For 'separated' view: Return inventory items grouped by location with location metadata included in each item. For 'aggregated' view: Sum quantities and other numeric fields across locations while preserving item identity. Implement aggregation using database-level GROUP BY operations for performance. Add location information to response structure including location name, code, and other relevant metadata. Handle edge cases like items existing in some locations but not others. Create aggregation helper functions that can sum quantities, calculate averages, and handle null values appropriately.

## 5. Update Response Structure with Location Information [pending]
### Dependencies: 5.4
### Description: Modify the API response format to include location data while ensuring backward compatibility for existing clients that don't use location parameters.
### Details:
Extend the response schema to include location information when location filtering is applied. For separated view: Add 'location' object to each inventory item containing id, name, code, and other relevant location attributes. For aggregated view: Include 'locations' array showing which locations contributed to the aggregated totals. Maintain the original response structure when no location parameters are provided. Add response metadata indicating the view type and applied filters. Implement conditional serialization to avoid including location data unnecessarily. Update API documentation with new response schema examples.

## 6. Add Comprehensive Testing and Documentation [pending]
### Dependencies: 5.5
### Description: Create thorough test coverage for all new functionality and update API documentation to reflect the new location-based capabilities while validating backward compatibility.
### Details:
Write unit tests for query parameter parsing, validation, and filtering logic. Create integration tests covering all combinations of location_id and view_type parameters. Test backward compatibility by ensuring existing API calls without location parameters work unchanged. Add performance tests with large datasets to validate index usage and response times. Create test cases for authorization scenarios and error conditions. Update OpenAPI/Swagger documentation with new query parameters, response schemas, and usage examples. Add code examples showing how to use the new location filtering capabilities. Test with actual client applications to ensure seamless integration.

